[vars]
proj_prefix="."
exp_prefix="{proj_prefix}/tutorial"
data_prefix="{proj_prefix}/tutorial-data"

dropout=0.7


[main]
name="Sequence to Sequence Vanilla"
output="{exp_prefix}/seq2seq_vanilla"
overwrite_output_dir=True
batch_size=64
epochs=100
tf_manager=<tf_manager>
train_dataset=<train_data>
val_dataset=<val_data>
trainer=<trainer>
runners=[<greedy_runner>, <perplexity_runner>]
postprocess=None
##########
evaluation=[("perplexity", "target", <perplexity>), ("target", "target", evaluators.BLEU), ("target", "target", evaluators.ChrF3)]
##########
logging_period=50
validation_period=500
runners_batch_size=64
random_seed=42

[tf_manager]
class=tf_manager.TensorFlowManager
num_threads=4
num_sessions=1
minimize_metric=False

[perplexity]
class=evaluators.AverageEvaluator
name="perplexity"


# DATA

[train_data]
class=dataset.load_dataset_from_files
s_target="{data_prefix}/ar2en-train.tgt.txt"
#############
s_source="{data_prefix}/ar2en-train.src.txt"
preprocessors=[("source", "source_char", processors.helpers.preprocess_char_based), ("target", "target_char", processors.helpers.preprocess_char_based)]
#############
lazy=True

[val_data]
class=dataset.load_dataset_from_files
s_target="{data_prefix}/ar2en-eval.tgt.txt"
#############
s_source="{data_prefix}/ar2en-eval.src.txt"
preprocessors=[("source", "source_char", processors.helpers.preprocess_char_based), ("target", "target_char", processors.helpers.preprocess_char_based)]
#############

[vocabulary]
class=vocabulary.from_dataset
datasets=[<train_data>]
##########
series_ids=["source_char", "target_char"]
##########
max_size=500
overwrite=True
save_file="{exp_prefix}/seq2seq_vanilla/vocabulary.txt"


# MODEL

################
[input_sequence]
class=model.sequence.EmbeddedSequence
max_length=30
embedding_size=128
data_id="source_char"
vocabulary=<vocabulary>
################

#########
[encoder]
class=encoders.recurrent.RecurrentEncoder
input_sequence=<input_sequence>
rnn_size=64
rnn_cell="LSTM"
rnn_direction="bidirectional"
dropout_keep_prob=$dropout
#########

[decoder]
class=decoders.Decoder
name="decoder"
########
encoders=[<encoder>]
########
vocabulary=<vocabulary>
data_id="target_char"
rnn_size=256
rnn_cell="LSTM"
max_output_len=30
dropout_keep_prob=$dropout
#################
#embedding_size=128
embeddings_source=<input_sequence>
#################


# TRAINERS & RUNNERS

[trainer]
class=trainers.cross_entropy_trainer.CrossEntropyTrainer
decoders=[<decoder>]
optimizer=<adam>
clip_norm=1.0

[adam]
class=tf.contrib.opt.LazyAdamOptimizer
beta1=0.9
beta2=0.997
epsilon=1.0e-9
learning_rate=1e-4

[greedy_runner]
class=runners.runner.GreedyRunner
decoder=<decoder>
output_series="target"
postprocess=processors.helpers.postprocess_char_based

[perplexity_runner]
class=runners.PerplexityRunner
decoder=<decoder>
output_series="perplexity"
